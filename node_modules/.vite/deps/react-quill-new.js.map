{
  "version": 3,
  "sources": ["../../react-quill-new/src/index.tsx"],
  "sourcesContent": ["/*\nReact-Quill\nhttps://github.com/zenoamaro/react-quill\n*/\n\nimport React, { createRef } from 'react';\nimport { isEqual } from 'lodash-es';\n\nimport Quill, { type EmitterSource, type Range as RangeStatic, QuillOptions as QuillOptionsStatic } from 'quill';\nimport type DeltaStatic from 'quill-delta';\n\nexport { Quill }\nexport type { DeltaStatic, EmitterSource, RangeStatic, QuillOptionsStatic }\n\n// Merged namespace hack to export types along with default object\n// See: https://github.com/Microsoft/TypeScript/issues/2719\nnamespace ReactQuill {\n  export type Value = string | DeltaStatic;\n  export type Range = RangeStatic | null;\n\n  export interface QuillOptions extends QuillOptionsStatic {\n    tabIndex?: number,\n  }\n\n  export interface ReactQuillProps {\n    bounds?: string | HTMLElement,\n    children?: React.ReactElement<any>,\n    className?: string,\n    defaultValue?: Value,\n    formats?: string[],\n    id?: string,\n    modules?: QuillOptions['modules'],\n    onChange?(\n      value: string,\n      delta: DeltaStatic,\n      source: EmitterSource,\n      editor: UnprivilegedEditor,\n    ): void,\n    onChangeSelection?(\n      selection: Range,\n      source: EmitterSource,\n      editor: UnprivilegedEditor,\n    ): void,\n    onFocus?(\n      selection: Range,\n      source: EmitterSource,\n      editor: UnprivilegedEditor,\n    ): void,\n    onBlur?(\n      previousSelection: Range,\n      source: EmitterSource,\n      editor: UnprivilegedEditor,\n    ): void,\n    onKeyDown?: React.EventHandler<any>,\n    onKeyPress?: React.EventHandler<any>,\n    onKeyUp?: React.EventHandler<any>,\n    placeholder?: string,\n    preserveWhitespace?: boolean,\n    readOnly?: boolean,\n    style?: React.CSSProperties,\n    tabIndex?: number,\n    theme?: string,\n    value?: Value,\n  }\n\n  export interface UnprivilegedEditor {\n    getLength: Quill['getLength'];\n    getText: Quill['getText'];\n    getHTML: () => string;\n    getSemanticHTML: Quill['getSemanticHTML'];\n    getBounds: Quill['getBounds'];\n    getSelection: Quill['getSelection'];\n    getContents: Quill['getContents'];\n  }\n}\n\n// Re-import everything from namespace into scope for comfort\nimport Value = ReactQuill.Value;\nimport Range = ReactQuill.Range;\nimport QuillOptions = ReactQuill.QuillOptions;\nimport ReactQuillProps = ReactQuill.ReactQuillProps;\nimport UnprivilegedEditor = ReactQuill.UnprivilegedEditor;\n\ninterface ReactQuillState {\n  generation: number,\n}\n\nclass ReactQuill extends React.Component<ReactQuillProps, ReactQuillState> {\n  editingAreaRef = createRef<any>();\n  containerRef = createRef<any>();\n\n  static displayName = 'React Quill'\n\n  /*\n  Export Quill to be able to call `register`\n  */\n  static Quill = Quill;\n\n  /*\n  Changing one of these props should cause a full re-render and a\n  re-instantiation of the Quill editor.\n  */\n  dirtyProps: (keyof ReactQuillProps)[] = [\n    'modules',\n    'formats',\n    'bounds',\n    'theme',\n    'children',\n  ]\n\n  /*\n  Changing one of these props should cause a regular update. These are mostly\n  props that act on the container, rather than the quillized editing area.\n  */\n  cleanProps: (keyof ReactQuillProps)[] = [\n    'id',\n    'className',\n    'style',\n    'placeholder',\n    'tabIndex',\n    'onChange',\n    'onChangeSelection',\n    'onFocus',\n    'onBlur',\n    'onKeyPress',\n    'onKeyDown',\n    'onKeyUp',\n  ]\n\n  static defaultProps = {\n    theme: 'snow',\n    modules: {},\n    readOnly: false,\n  }\n\n  state: ReactQuillState = {\n    generation: 0,\n  }\n\n  /*\n  The Quill Editor instance.\n  */\n  editor?: Quill\n\n  /*\n  Tracks the internal value of the Quill editor\n  */\n  value: Value\n\n  /*\n  Tracks the internal selection of the Quill editor\n  */\n  selection: Range = null\n\n  /*\n  Used to compare whether deltas from `onChange` are being used as `value`.\n  */\n  lastDeltaChangeSet?: DeltaStatic\n\n  /*\n  Stores the contents of the editor to be restored after regeneration.\n  */\n  regenerationSnapshot?: {\n    delta: DeltaStatic,\n    selection: Range,\n  }\n\n  /*\n  A weaker, unprivileged proxy for the editor that does not allow accidentally\n  modifying editor state.\n  */\n  unprivilegedEditor?: UnprivilegedEditor\n\n  constructor(props: ReactQuillProps) {\n    super(props);\n    const value = this.isControlled()? props.value : props.defaultValue;\n    this.value = value ?? '';\n  }\n\n  validateProps(props: ReactQuillProps): void {\n    if (React.Children.count(props.children) > 1) throw new Error(\n      'The Quill editing area can only be composed of a single React element.'\n    );\n\n    if (React.Children.count(props.children)) {\n      const child = React.Children.only(props.children);\n      if (child?.type === 'textarea') throw new Error(\n        'Quill does not support editing on a <textarea>. Use a <div> instead.'\n      );\n    }\n\n    if (\n      this.lastDeltaChangeSet &&\n      props.value === this.lastDeltaChangeSet\n    ) throw new Error(\n      'You are passing the `delta` object from the `onChange` event back ' +\n      'as `value`. You most probably want `editor.getContents()` instead. ' +\n      'See: https://github.com/zenoamaro/react-quill#using-deltas'\n    );\n  }\n\n  shouldComponentUpdate(nextProps: ReactQuillProps, nextState: ReactQuillState) {\n    this.validateProps(nextProps);\n\n    // If the editor hasn't been instantiated yet, or the component has been\n    // regenerated, we already know we should update.\n    if (!this.editor || this.state.generation !== nextState.generation) {\n      return true;\n    }\n\n    // Handle value changes in-place\n    if ('value' in nextProps) {\n      const prevContents = this.getEditorContents();\n      const nextContents = nextProps.value ?? '';\n\n      // NOTE: Seeing that Quill is missing a way to prevent edits, we have to\n      //       settle for a hybrid between controlled and uncontrolled mode. We\n      //       can't prevent the change, but we'll still override content\n      //       whenever `value` differs from current state.\n      // NOTE: Comparing an HTML string and a Quill Delta will always trigger a\n      //       change, regardless of whether they represent the same document.\n      if (!this.isEqualValue(nextContents, prevContents)) {\n        this.setEditorContents(this.editor, nextContents);\n      }\n    }\n\n    // Handle read-only changes in-place\n    if (nextProps.readOnly !== this.props.readOnly) {\n      this.setEditorReadOnly(this.editor, nextProps.readOnly!);\n    }\n\n    // Clean and Dirty props require a render\n    return [...this.cleanProps, ...this.dirtyProps].some((prop) => {\n      return !isEqual(nextProps[prop], this.props[prop]);\n    });\n  }\n\n  shouldComponentRegenerate(nextProps: ReactQuillProps): boolean {\n    // Whenever a `dirtyProp` changes, the editor needs reinstantiation.\n    return this.dirtyProps.some((prop) => {\n      return !isEqual(nextProps[prop], this.props[prop]);\n    });\n  }\n\n  componentDidMount() {\n    this.instantiateEditor();\n    this.setEditorContents(this.editor!, this.getEditorContents());\n  }\n\n  componentWillUnmount() {\n    this.destroyEditor();\n  }\n\n  componentDidUpdate(prevProps: ReactQuillProps, prevState: ReactQuillState) {\n    // If we're changing one of the `dirtyProps`, the entire Quill Editor needs\n    // to be re-instantiated. Regenerating the editor will cause the whole tree,\n    // including the container, to be cleaned up and re-rendered from scratch.\n    // Store the contents so they can be restored later.\n    if (this.editor && this.shouldComponentRegenerate(prevProps)) {\n      const delta = this.editor.getContents();\n      const selection = this.editor.getSelection();\n      this.regenerationSnapshot = {delta, selection};\n      this.setState({generation: this.state.generation + 1});\n      this.destroyEditor();\n    }\n\n    // The component has been regenerated, so it must be re-instantiated, and\n    // its content must be restored to the previous values from the snapshot.\n    if (this.state.generation !== prevState.generation) {\n      const {delta, selection} = this.regenerationSnapshot!;\n      delete this.regenerationSnapshot;\n      this.instantiateEditor();\n      const editor = this.editor!;\n      editor.setContents(delta);\n      postpone(() => this.setEditorSelection(editor, selection));\n    }\n  }\n\n  instantiateEditor(): void {\n    if (this.editor) {\n      this.hookEditor(this.editor);\n    } else {\n      this.editor = this.createEditor(\n        this.getEditingArea(),\n        this.getEditorConfig()\n      );\n    }\n  }\n\n  destroyEditor(): void {\n    if (!this.editor) return;\n    this.unhookEditor(this.editor);\n    // There is a buggy interaction between Quill and React 18+ strict mode, where\n    // strict mode re-renders this component twice in the span of time that Quill\n    // is mounting. This causes the toolbar to be rendered twice.\n    // We check for and remove the toolbar if it exists, but only if we're not using\n    // a custom external toolbar (which we don't want to remove).\n    const toolbar = this.props.modules?.toolbar;\n    const usingExternalToolbar =\n      (typeof toolbar === \"object\" &&\n        toolbar &&\n        \"container\" in toolbar &&\n        typeof toolbar.container === \"string\") ||\n      typeof toolbar === \"string\";\n    if (!usingExternalToolbar) {\n      const leftOverToolbar = this.containerRef.current?.querySelector(\".ql-toolbar\");\n      if (leftOverToolbar) {\n        leftOverToolbar.remove();\n      }\n    }\n    delete this.editor;\n  }\n\n  /*\n  We consider the component to be controlled if `value` is being sent in props.\n  */\n  isControlled(): boolean {\n    return 'value' in this.props;\n  }\n\n  getEditorConfig(): QuillOptions {\n    return {\n      bounds: this.props.bounds,\n      formats: this.props.formats,\n      modules: this.props.modules,\n      placeholder: this.props.placeholder,\n      readOnly: this.props.readOnly,\n      tabIndex: this.props.tabIndex,\n      theme: this.props.theme,\n    };\n  }\n\n  getEditor(): Quill {\n    if (!this.editor) throw new Error('Accessing non-instantiated editor');\n    return this.editor;\n  }\n\n  /**\n  Creates an editor on the given element. The editor will be passed the\n  configuration, have its events bound,\n  */\n  createEditor(element: HTMLElement, config: QuillOptions) {\n    const editor = new Quill(element, config);\n    if (config.tabIndex != null) {\n      this.setEditorTabIndex(editor, config.tabIndex);\n    }\n    this.hookEditor(editor);\n    return editor;\n  }\n\n  hookEditor(editor: Quill) {\n    // Expose the editor on change events via a weaker, unprivileged proxy\n    // object that does not allow accidentally modifying editor state.\n    this.unprivilegedEditor = this.makeUnprivilegedEditor(editor);\n    // Using `editor-change` allows picking up silent updates, like selection\n    // changes on typing.\n    editor.on('editor-change', this.onEditorChange);\n  }\n\n  unhookEditor(editor: Quill) {\n    editor.off('editor-change', this.onEditorChange);\n  }\n\n  getEditorContents(): Value {\n    return this.value;\n  }\n\n  getEditorSelection(): Range {\n    return this.selection;\n  }\n\n  /*\n  True if the value is a Delta instance or a Delta look-alike.\n  */\n  isDelta(value: any): boolean {\n    return value && value.ops;\n  }\n\n  /*\n  Special comparison function that knows how to compare Deltas.\n  */\n  isEqualValue(value: any, nextValue: any): boolean {\n    if (this.isDelta(value) && this.isDelta(nextValue)) {\n      return isEqual(value.ops, nextValue.ops);\n    } else {\n      return isEqual(value, nextValue);\n    }\n  }\n\n  /*\n  Replace the contents of the editor, but keep the previous selection hanging\n  around so that the cursor won't move.\n  */\n  setEditorContents(editor: Quill, value: Value) {\n    this.value = value;\n    const sel = this.getEditorSelection();\n    if (typeof value === 'string') {\n      editor.setContents(editor.clipboard.convert({html: value}));\n    } else {\n      editor.setContents(value);\n    }\n    postpone(() => this.setEditorSelection(editor, sel));\n  }\n\n  setEditorSelection(editor: Quill, range: Range) {\n    this.selection = range;\n    if (range) {\n      // Validate bounds before applying.\n      const length = editor.getLength();\n      range.index = Math.max(0, Math.min(range.index, length-1));\n      range.length = Math.max(0, Math.min(range.length, (length-1) - range.index));\n      editor.setSelection(range);\n    }\n  }\n\n  setEditorTabIndex(editor: Quill, tabIndex: number) {\n    if (editor?.scroll?.domNode) {\n      (editor.scroll.domNode as HTMLElement).tabIndex = tabIndex;\n    }\n  }\n\n  setEditorReadOnly(editor: Quill, value: boolean) {\n    if (value) {\n      editor.disable();\n    } else {\n      editor.enable();\n    }\n  }\n\n  /*\n  Returns a weaker, unprivileged proxy object that only exposes read-only\n  accessors found on the editor instance, without any state-modifying methods.\n  */\n  makeUnprivilegedEditor(editor: Quill) {\n    const e = editor;\n    return {\n      getHTML:         () => e.root.innerHTML,\n      getSemanticHTML: e.getSemanticHTML.bind(e),\n      getLength:       e.getLength.bind(e),\n      getText:         e.getText.bind(e),\n      getContents:     e.getContents.bind(e),\n      getSelection:    e.getSelection.bind(e),\n      getBounds:       e.getBounds.bind(e),\n    };\n  }\n\n  getEditingArea(): HTMLElement {\n    const element = this.editingAreaRef.current;\n    if (!element) {\n      throw new Error('Cannot find element for editing area');\n    }\n    if (element.nodeType === 3) {\n      throw new Error('Editing area cannot be a text node');\n    }\n    return element as HTMLElement;\n  }\n\n  /*\n  Renders an editor area, unless it has been provided one to clone.\n  */\n  renderEditingArea(): JSX.Element {\n    const {children, preserveWhitespace} = this.props;\n    const {generation} = this.state;\n\n    const properties = {\n      key: generation,\n      ref: this.editingAreaRef,\n    };\n\n    if (React.Children.count(children)) {\n      return React.cloneElement(\n        React.Children.only(children)!,\n        properties\n      );\n    }\n\n    return preserveWhitespace ?\n      <pre {...properties}/> :\n      <div {...properties}/>;\n  }\n\n  render() {\n    return (\n      <div\n        ref={this.containerRef}\n        id={this.props.id}\n        style={this.props.style}\n        key={this.state.generation}\n        className={`quill ${this.props.className ?? ''}`}\n        onKeyPress={this.props.onKeyPress}\n        onKeyDown={this.props.onKeyDown}\n        onKeyUp={this.props.onKeyUp}\n      >\n        {this.renderEditingArea()}\n      </div>\n    );\n  }\n\n  onEditorChange = (\n    eventName: 'text-change' | 'selection-change',\n    rangeOrDelta: Range | DeltaStatic,\n    oldRangeOrDelta: Range | DeltaStatic,\n    source: EmitterSource,\n  ) => {\n    if (eventName === 'text-change') {\n      this.onEditorChangeText?.(\n        this.editor!.root.innerHTML,\n        rangeOrDelta as DeltaStatic,\n        source,\n        this.unprivilegedEditor!\n      );\n    } else if (eventName === 'selection-change') {\n      this.onEditorChangeSelection?.(\n        rangeOrDelta as RangeStatic,\n        source,\n        this.unprivilegedEditor!\n      );\n    }\n  };\n\n  onEditorChangeText(\n    value: string,\n    delta: DeltaStatic,\n    source: EmitterSource,\n    editor: UnprivilegedEditor,\n  ): void {\n    if (!this.editor) return;\n\n    // We keep storing the same type of value as what the user gives us,\n    // so that value comparisons will be more stable and predictable.\n    const nextContents = this.isDelta(this.value)\n      ? editor.getContents()\n      : editor.getHTML();\n\n    if (nextContents !== this.getEditorContents()) {\n      // Taint this `delta` object, so we can recognize whether the user\n      // is trying to send it back as `value`, preventing a likely loop.\n      this.lastDeltaChangeSet = delta;\n\n      this.value = nextContents;\n      this.props.onChange?.(value, delta, source, editor);\n    }\n  }\n\n  onEditorChangeSelection(\n    nextSelection: RangeStatic,\n    source: EmitterSource,\n    editor: UnprivilegedEditor,\n  ): void {\n    if (!this.editor) return;\n    const currentSelection = this.getEditorSelection();\n    const hasGainedFocus = !currentSelection && nextSelection;\n    const hasLostFocus = currentSelection && !nextSelection;\n\n    if (isEqual(nextSelection, currentSelection)) return;\n\n    this.selection = nextSelection;\n    this.props.onChangeSelection?.(nextSelection, source, editor);\n\n    if (hasGainedFocus) {\n      this.props.onFocus?.(nextSelection, source, editor);\n    } else if (hasLostFocus) {\n      this.props.onBlur?.(currentSelection, source, editor);\n    }\n  }\n\n  focus(): void {\n    if (!this.editor) return;\n    this.editor.focus();\n  }\n\n  blur(): void {\n    if (!this.editor) return;\n    this.selection = null;\n    this.editor.blur();\n  }\n}\n\n/*\nSmall helper to execute a function in the next micro-tick.\n*/\nfunction postpone(fn: (value: void) => void) {\n  Promise.resolve().then(fn);\n}\n\nexport default ReactQuill;\n"],
  "mappings": "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",
  "names": ["React"]
}
