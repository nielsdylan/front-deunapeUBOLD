{
  "version": 3,
  "sources": ["../../react-use-wizard/src/wizardContext.ts", "../../react-use-wizard/src/useWizard.ts", "../../react-use-wizard/src/logger.ts", "../../react-use-wizard/src/wizard.tsx"],
  "sourcesContent": ["import * as React from 'react';\n\nimport { WizardValues } from './types';\n\nconst WizardContext = React.createContext<WizardValues | null>(null);\n\nif (__DEV__) {\n  WizardContext.displayName = 'WizardContext';\n}\n\nexport default WizardContext;\n", "import * as React from 'react';\n\nimport { WizardValues } from './types';\nimport WizardContext from './wizardContext';\n\nconst useWizard = () => {\n  const context = React.useContext(WizardContext);\n\n  if (!context && __DEV__) {\n    throw Error('Wrap your step with `Wizard`');\n  } else {\n    return context as WizardValues;\n  }\n};\n\nexport default useWizard;\n", "import { LogLevel } from './types';\n/**\n * Log messages in the console with a corresponding urgency\n *\n * @param level The urgency of the message\n * @param message The message to log in the console\n */\nexport const log = (level: LogLevel, message: string) => {\n  if (__DEV__) {\n    const packageName = '[react-use-wizard]';\n\n    switch (level) {\n      case 'warn':\n        console.warn(`${packageName} ${message}`);\n        break;\n      case 'error':\n        console.error(`${packageName} ${message}`);\n        break;\n      default:\n        console.log(`${packageName} ${message}`);\n    }\n  }\n};\n", "import * as React from 'react';\n\nimport * as logger from './logger';\nimport { Handler, WizardProps } from './types';\nimport WizardContext from './wizardContext';\n\nconst Wizard: React.FC<React.PropsWithChildren<WizardProps>> = React.memo(\n  ({\n    header,\n    footer,\n    children,\n    onStepChange,\n    wrapper: Wrapper,\n    startIndex = 0,\n  }) => {\n    const [activeStep, setActiveStep] = React.useState(startIndex);\n    const [isLoading, setIsLoading] = React.useState(false);\n    const hasNextStep = React.useRef(true);\n    const hasPreviousStep = React.useRef(false);\n    const nextStepHandler = React.useRef<Handler>(() => {});\n    const stepCount = React.Children.toArray(children).length;\n\n    hasNextStep.current = activeStep < stepCount - 1;\n    hasPreviousStep.current = activeStep > 0;\n\n    const goToNextStep = React.useCallback(() => {\n      if (hasNextStep.current) {\n        const newActiveStepIndex = activeStep + 1;\n\n        setActiveStep(newActiveStepIndex);\n        onStepChange?.(newActiveStepIndex);\n      }\n    }, [activeStep, onStepChange]);\n\n    const goToPreviousStep = React.useCallback(() => {\n      if (hasPreviousStep.current) {\n        nextStepHandler.current = null;\n        const newActiveStepIndex = activeStep - 1;\n\n        setActiveStep(newActiveStepIndex);\n        onStepChange?.(newActiveStepIndex);\n      }\n    }, [activeStep, onStepChange]);\n\n    const goToStep = React.useCallback(\n      (stepIndex: number) => {\n        if (stepIndex >= 0 && stepIndex < stepCount) {\n          nextStepHandler.current = null;\n          setActiveStep(stepIndex);\n          onStepChange?.(stepIndex);\n        } else {\n          if (__DEV__) {\n            logger.log(\n              'warn',\n              [\n                `Invalid step index [${stepIndex}] passed to 'goToStep'. `,\n                `Ensure the given stepIndex is not out of boundaries.`,\n              ].join(''),\n            );\n          }\n        }\n      },\n      [stepCount, onStepChange],\n    );\n\n    // Callback to attach the step handler\n    const handleStep = React.useRef((handler: Handler) => {\n      nextStepHandler.current = handler;\n    });\n\n    const doNextStep = React.useCallback(async () => {\n      if (hasNextStep.current && nextStepHandler.current) {\n        try {\n          setIsLoading(true);\n          await nextStepHandler.current();\n          setIsLoading(false);\n          nextStepHandler.current = null;\n          goToNextStep();\n        } catch (error) {\n          setIsLoading(false);\n          throw error;\n        }\n      } else {\n        goToNextStep();\n      }\n    }, [goToNextStep]);\n\n    const wizardValue = React.useMemo(\n      () => ({\n        nextStep: doNextStep,\n        previousStep: goToPreviousStep,\n        handleStep: handleStep.current,\n        isLoading,\n        activeStep,\n        stepCount,\n        isFirstStep: !hasPreviousStep.current,\n        isLastStep: !hasNextStep.current,\n        goToStep,\n      }),\n      [\n        doNextStep,\n        goToPreviousStep,\n        isLoading,\n        activeStep,\n        stepCount,\n        goToStep,\n      ],\n    );\n\n    const activeStepContent = React.useMemo(() => {\n      const reactChildren = React.Children.toArray(children);\n\n      if (__DEV__) {\n        // No steps passed\n        if (reactChildren.length === 0) {\n          logger.log(\n            'warn',\n            'Make sure to pass your steps as children in your <Wizard>',\n          );\n        }\n        // The passed start index is invalid\n        if (activeStep > reactChildren.length) {\n          logger.log('warn', 'An invalid startIndex is passed to <Wizard>');\n        }\n        // Invalid header element\n        if (header && !React.isValidElement(header)) {\n          logger.log('error', 'Invalid header passed to <Wizard>');\n        }\n        // Invalid footer element\n        if (footer && !React.isValidElement(footer)) {\n          logger.log('error', 'Invalid footer passed to <Wizard>');\n        }\n      }\n\n      return reactChildren[activeStep];\n    }, [activeStep, children, header, footer]);\n\n    const enhancedActiveStepContent = React.useMemo(\n      () =>\n        Wrapper\n          ? React.cloneElement(Wrapper, { children: activeStepContent })\n          : activeStepContent,\n      [Wrapper, activeStepContent],\n    );\n\n    return (\n      <WizardContext.Provider value={wizardValue}>\n        {header}\n        {enhancedActiveStepContent}\n        {footer}\n      </WizardContext.Provider>\n    );\n  },\n);\n\nexport default Wizard;\n"],
  "mappings": "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",
  "names": ["WizardContext", "React", "displayName", "useWizard", "context", "Error", "log", "level", "message", "packageName", "console", "warn", "error", "Wizard", "header", "footer", "children", "onStepChange", "wrapper", "Wrapper", "startIndex", "activeStep", "setActiveStep", "isLoading", "setIsLoading", "hasNextStep", "hasPreviousStep", "nextStepHandler", "stepCount", "toArray", "length", "current", "goToNextStep", "newActiveStepIndex", "goToPreviousStep", "goToStep", "stepIndex", "logger", "join", "handleStep", "handler", "doNextStep", "wizardValue", "nextStep", "previousStep", "isFirstStep", "isLastStep", "activeStepContent", "reactChildren", "enhancedActiveStepContent", "Provider", "value"]
}
